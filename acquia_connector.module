<?php

use Drupal\acquia_connector\Controller;
use Drupal\acquia_connector\Subscription;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

// Version of SPI data format.
define('ACQUIA_SPI_DATA_VERSION', 2.1);

/**
 * Identifiers for the method of sending SPI data.
 */
define('ACQUIA_SPI_METHOD_CALLBACK', 'menu');
define('ACQUIA_SPI_METHOD_CRON', 'cron');
define('ACQUIA_SPI_METHOD_DRUSH', 'drush');
define('ACQUIA_SPI_METHOD_CREDS', 'creds');
define('ACQUIA_SPI_METHOD_INSIGHT', 'insight');

/**
 * Implements hook_help().
 */
function acquia_connector_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.acquia_connector':
      $output = '<h2>' . t('Acquia Connector') . '</h2>';
      $output .= '<p>' . t("The Acquia Network Connector module allows you to connect your site to the Acquia Network and use its variety of services.") . '<p>';
      $output .= '<p>' . \Drupal::l(t('Read more about the installation and use of the Acquia Network Connector module on the Acquia Library'), Url::fromUri('https://docs.acquia.com/network/install/connector', array())) . '</p>';
      $output .= '<dl>';
      $output .= '<dt>Acquia SPI Custom Tests</dt>';
      $output .= '<dd>' . t('Acquia Insight supports custom tests for your site. See <strong>acquia_spi.api.php</strong> for information on the custom test hook and validate your tests for inclusion in outgoing SPI data with the Drush command, <strong>spi-test-validate</strong>.') . '</dt>';
      $output .= '<dt>Acquia Search</dt>';
      $output .= '<dd>' . t('Provides authentication service to the Apache Solr Search Integration module to enable use of Acquia\'s hosted Solr search indexes.') . '</dt>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Configuration settings') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Data collection and examination') . '</dt>';
      $output .= '<dd>' . t('Upon cron (or if configured to run manually) information about your site will be sent and analyzed as part of the Acquia Insight service. You can optionally exclude information about admin privileges, content and user count, and watchdog logs.');
      $output .= '<dt>' . t('Source code analysis') . '</dt>';
      $output .= '<dd>' . t('If your site supports external SSL connections, Acquia Insight will examine the source code of your site to detect alterations and provide code diffs and update recommentations.');
      $output .= '<dt>' . t('Receive updates from Acquia Network') . '</dt>';
      $output .= '<dd>' . t('Receive dynamic updates on the Network Settings page from Acquia.com about your subscription and new features.') . '</dd>';
      $output .= '<dt>' . t('Allow Insight to update list of approved variables.') . '</dt>';
      $output .= '<dd>' . t('As part of the Acquia Insight service, some variables can be corrected to their recommended settings from within the Insight system. The list of variables that can be corrected can also be updated at your discretion.') . '</dd>';
      $output .= '</dl>';

      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter()..
 */
function acquia_connector_form_system_modules_alter(&$form, &$form_state) {
  if (isset($form['description']['acquia_search'])) {
    $subscription = \Drupal::config('acquia_connector.settings')->get('subscription_data');

    if (!\Drupal::moduleHandler()->moduleExists('acquia_search') && empty($subscription['active'])) {
      $form['status']['#disabled_modules'][] = 'acquia_search';
      $text = 'Acquia Search requires an <a href="@network-url">Acquia Network subscription</a>';
      $message = t($text, array('@network-url' => 'http://acquia.com/products-services/acquia-search'));
      $form['description']['acquia_search']['#value'] = '<div style="padding-left:5px; margin:8px 0px" class="messages warning" id="acquia-agent-no-search">' . $message . '</div>' . $form['description']['acquia_search']['#value'];
    }
  }
}

/**
 * Implements hook_cron().
 */
function acquia_connector_cron() {
  // Check subscription and send a heartbeat to Acquia Network via XML-RPC.
  $subscription = new Subscription();
  $subscription->update();

  $config = \Drupal::config('acquia_connector.settings');

  // Get the last time we processed data.
  $last = $config->get('cron_last');

  // 30 minute interval for sending site profile.
  $interval = $config->get('cron_interval');

  // Determine if the required interval has passed.
  if ($config->get('use_cron') && ((REQUEST_TIME - $last) > ($interval * 60))) {
    \Drupal::service('acquia_connector.spi')->sendFullSpi(ACQUIA_SPI_METHOD_CRON);
  }
}

/**
 * Implements hook_toolbar().
 */
function acquia_connector_toolbar() {
  $link = [
    '#type' => 'link',
    '#theme_wrappers' => [],
    '#type' => 'link',
    '#options' => ['html' => TRUE,],
  ];

  $subscription_class = new Subscription();

  if ($subscription_class->isActive()) {
    $subscription = \Drupal::config('acquia_connector.settings')->get('subscription_data');
    // @todo Fix CSS
    if (is_array($subscription['expiration_date']) && isset($subscription['active']) && $subscription['active'] !== FALSE) {
      // Yes, this uses inline CSS, which sounds bad, but including a CSS file
      // just for this sounds equally bad.
      $icon = '<img src="' . base_path() . 'core/misc/icons/73b355/check.svg" alt="ok" style="vertical-align: middle;" />';
      $link['#title'] = t("!icon Subscription active (expires @date)", array('!icon' => $icon, '@date' => format_date(strtotime($subscription['expiration_date']['value']), 'custom', 'Y/n/j')));
      $link['#options']['attributes']['class'][] = "acquia-active-subscription";
      $link['#url'] = Url::fromUri($subscription['href']);
    }
  }

  if (empty($link['#url'])) {
    // Yes, this uses inline CSS, which sounds bad, but including a CSS file
    // just for this sounds equally bad.
    $icon = '<img src="' . base_path() . 'core/misc/icons/ea2800/error.svg" alt="error" style="vertical-align: middle;" />';
    $link['#title'] = t("!icon Subscription not active", array('!icon' => $icon));
    $link['#attributes']['class'][] = "acquia-inactive-subscription";
    $link['#url'] = Url::fromUri('https://insight.acquia.com');
  }

  return [
    'acquia_connector' => [
      '#type' => 'toolbar_item',
      'tab' => $link,
      '#weight' => 200,
    ],
  ];
}

/**
 * Implements hook_update_status_alter().
 *
 * This compares the array of computed information about projects that are
 * missing available updates with the saved settings. If the settings specify
 * that a particular project or release should be ignored, the status for that
 * project is altered to indicate it is ignored because of settings.
 *
 * @param $projects
 *   Reference to an array of information about available updates to each
 *   project installed on the system.
 *
 * @see update_calculate_project_data()
 */
function acquia_connector_update_status_alter(&$projects) {
  if (!$subscription = acquia_connector_has_update_service()) {
    // Get subscription data or return if the service is not enabled.
    return;
  }

  acquia_connector_load_versions();

  foreach ($projects as $project => $project_info) {
    if ($project == 'drupal') {
      if (isset($subscription['update'])) {
        $projects[$project]['status'] = isset($subscription['update']['status']) ? $subscription['update']['status'] : t('Unknown');
        $projects[$project]['releases'] = isset($subscription['update']['releases']) ? $subscription['update']['releases'] : array();
        $projects[$project]['recommended'] = isset($subscription['update']['recommended']) ? $subscription['update']['recommended'] : '';
        $projects[$project]['latest_version'] = isset($subscription['update']['latest_version']) ? $subscription['update']['latest_version'] : '';
        // Security updates are a separate piece of data.  If we leave it, then core
        // security warnings from druapl.org will also be displayed on the update page.
        unset($projects[$project]['security updates']);
      }
      else {
        $projects[$project]['status'] = UPDATE_NOT_CHECKED;
        $projects[$project]['reason'] = t('No information available from the Acquia Network');
        unset($projects[$project]['releases']);
        unset($projects[$project]['recommended']);
      }
      $projects[$project]['link'] = 'http://acquia.com/products-services/acquia-drupal';
      $projects[$project]['title'] = 'Acquia Drupal';
      $projects[$project]['existing_version'] = ACQUIA_DRUPAL_VERSION;
      $projects[$project]['install_type'] = 'official';
      unset($projects[$project]['extra']);
    }
    elseif ($project_info['datestamp'] == 'acquia drupal') {
      $projects['drupal']['includes'][$project] = !empty($project_info['title']) ? $project_info['title'] : '';
      unset($projects[$project]);
    }
  }
}

/******** start code to rewrite *********/


/**
 * Implements hook_system_info_alter()
 */
function acquia_connector_system_info_alter(&$info) {
//  if (!$subscription = acquia_agent_has_update_service()) {
//    // Get subscription data or return if the service is not enabled.
//    return;
//  }
//
//  if (isset($info['acquia'])) {
//    // Slight hack - the datestamp field is carried through by update.module.
//    $info['datestamp'] = 'acquia drupal';
//  }
}

/******** end code to rewrite *********/

/**
 * API function used by others to ensure version information is loaded.
 *
 * Saves us some cycles to not load it each time, when it is actually
 * not needed. We store this in a separate file, so that the Acquia
 * build process only needs to alter that file instead of the main
 * module file.
 * D7: acquia_agent_load_versions().
 */
function acquia_connector_load_versions() {
  // Include version number information.
  include_once 'acquia_connector_drupal_version.inc';
}


/**
 * Returns the stored subscription data if update service is enabled or FALSE otherwise.
 * D7: acquia_agent_has_update_service
 */
function acquia_connector_has_update_service() {
  // Include version number information.
  acquia_connector_load_versions();
  $subscription = Drupal::config('acquia_connector.settings')->get('subscription_data');
  if (!IS_ACQUIA_DRUPAL || empty($subscription['active']) || (isset($subscription['update_service']) && empty($subscription['update_service']))) {
    // We don't have update service if (1) this is not Acquia Drupal, (2) there
    // is no subscription or (3) the update service was disabled on acquia.com.
    // Requiring the update_service key and checking its value separately is
    // important for backwards compatibility. Isset & empty tells us
    // that the web service willingly told us to not do update notifications.
    return FALSE;
  }

  return $subscription;
}

/**
 * Set error message.
 * @param $code
 * @param $message
 * d7: acquia_agent_report_xmlrpc_error().
 */
function acquia_connect_report_restapi_error($code, $message) {
  drupal_set_message(t('Error: @message (@errno)', array('@message' => $message, '@errno' => $code)), 'error');
}


/**
 * Returns an error message for the most recent (failed) attempt to connect
 * to the Acquia Network during the current page request. If there were no
 * failed attempts, returns FALSE.
 *
 * This function assumes that the most recent XML-RPC error came from the
 * Acquia Network; otherwise, it will not work correctly.
 *
 * @param int $errno.
 * @return string or FALSE.
 * d7: acquia_agent_connection_error_message().
 */
function acquia_connector_connection_error_message($errno) {
  switch ($errno) {
    case Subscription::NOT_FOUND:
      return t('The identifier you have provided does not exist in the Acquia Network or is expired. Please make sure you have used the correct value and try again.');
      break;
    case Subscription::EXPIRED:
      return t('Your Acquia Network subscription has expired. Please renew your subscription so that you can resume using Acquia Network services.');
      break;
    case Subscription::MESSAGE_FUTURE:
      return t('Your server is unable to communicate with the Acquia Network due to a problem with your clock settings. For security reasons, we reject messages that are more than @time ahead of the actual time recorded by our servers. Please fix the clock on your server and try again.', array('@time' => format_interval(SUBSCRIPTION_MESSAGE_LIFETIME)));
      break;
    case Subscription::MESSAGE_EXPIRED:
      return t('Your server is unable to communicate with the Acquia Network due to a problem with your clock settings. For security reasons, we reject messages that are more than @time older than the actual time recorded by our servers. Please fix the clock on your server and try again.', array('@time' => format_interval(SUBSCRIPTION_MESSAGE_LIFETIME)));
      break;
    case Subscription::VALIDATION_ERROR:
      return t('The identifier and key you have provided for the Acquia Network do not match. Please make sure you have used the correct values and try again.');
      break;
    default:
      return t('There is an error communicating with the Acquia Network at this time. Please check your identifier and key and try again.');
      break;
  }
  return FALSE;
}

///**
// * Implements hook_search_api_solr_query_alter.
// *
// * @param \Solarium\QueryType\Select\Query\Query $solarium_query
// *   The Solarium query object, as generated from the Search API query.
// * @param \Drupal\search_api\Query\QueryInterface $query
// *   The Search API query object representing the executed search query.
// */
//function acquia_connector_search_api_solr_query_alter(\Solarium\QueryType\Select\Query\Query $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
//  dpm('hook_search_api_solr_query_alter');
//  dpm($solarium_query->getResultClass());
//  dpm($query->solr);
//  $customizer = $this->solr->getPlugin('customizerequest');
//  // add a persistent HTTP header (using array input values)
//  $customizer->createCustomization(array(
//    'key' => 'id',
//    'type' => 'param',
//    'name' => 'request_id',
//    'value' => uniqid(),
//    'persistent' => true
//  ));
//  dpm($query);
//  if ($query->getOption('foobar')) {
//    // If the Search API query has a 'foobar' option, remove all sorting options
//    // from the Solarium query.
//    $solarium_query->clearSorts();
//  }
//}

/**
 * Implementation of hook_acquia_subscription_status().
 *
 * @param array|bool $subscription
 */
function acquia_connector_acquia_subscription_status($subscription = FALSE) {
  if (!empty($subscription['active'])) {
//    acquia_search_enable_acquia_solr_environment();
    // Refresh the salt with the subscription data returned by the heartbeat
    // since it can change periodically.
    $salt = \Drupal::config('acquia_connector.settings')->get('search.derived_key_salt');
    if (isset($subscription['derived_key_salt']) && $salt != $subscription['derived_key_salt']) {
      \Drupal::config('acquia_connector.settings')
        ->set('search.derived_key_salt', $subscription['derived_key_salt'])
        ->save();
    }
  }
  else {
    if (is_int($subscription)) {
      switch ($subscription) {
        case SUBSCRIPTION_NOT_FOUND:
        case SUBSCRIPTION_EXPIRED:
//          acquia_search_disable();
          break;
      }
    }
  }
}

//
///**
// * Create a new record pointing to the Acquia apachesolr search server and set it as the default
// */
//function acquia_search_enable_acquia_solr_environment() {
////  // Creates the new environment
////  $environment = apachesolr_environment_load(ACQUIA_SEARCH_ENVIRONMENT_ID);
////  if (!$environment) {
////    $environment['conf'] = array();
////
////    // Copy the bundles from the previous default environment
////    $orig_env_id = apachesolr_default_environment();
////    $orig_env = apachesolr_environment_load($orig_env_id);
////    $environment['index_bundles'] = $orig_env['index_bundles'];
////
////    // Also make sure that the default search page has Acquia Search as its
////    // default environment
////    $default_search_page_id = apachesolr_search_default_search_page();
////    $default_search_page = apachesolr_search_page_load($default_search_page_id);
////    if (!empty($default_search_page) && ($default_search_page['env_id'] != ACQUIA_SEARCH_ENVIRONMENT_ID)) {
////      $default_search_page['env_id'] = ACQUIA_SEARCH_ENVIRONMENT_ID;
////      apachesolr_search_page_save($default_search_page);
////    }
////
////    // Only set the default if we just created the environment.
////    // This will almost always happen, unless the module was disabled via SQL.
////    variable_set('apachesolr_default_environment', ACQUIA_SEARCH_ENVIRONMENT_ID);
////    // Make sure apachesolr search is the default search module.
////    variable_set('search_default_module', 'apachesolr_search');
////  }
//
//  $acquia_environment = acquia_search_get_environment();
//  // Override default values
//  foreach($acquia_environment as $key => $value) {
//    $environment[$key] = $value;
//  }
//  $environment['env_id'] = ACQUIA_SEARCH_ENVIRONMENT_ID;
//  $environment['name'] = t('Acquia Search');
//
//  // allow other modules to override this
////  drupal_alter('acquia_search_enable', $environment);
////  apachesolr_environment_save($environment);
//}

//
///**
// * Predefined Acquia Search network environment
// */
//function acquia_search_get_environment($conf = array()) {
//  $config = \Drupal::config('acquia_connector.settings');
//  if (!empty($conf['acquia_subscription_id']) && !empty($conf['acquia_subscription_key'])) {
//    $identifier = $conf['acquia_subscription_id'];
//    $key = $conf['acquia_subscription_key'];
//    $subscription = acquia_agent_get_subscription($params = array(), $identifier, $key);
//  }
//  else {
//    $identifier = $config->get('identifier');
//    $subscription = $config->get('subscription_data');
//  }
//  $search_host = $config->get('search.host');;
//  // @todo rework this logic once we have AH_SERVER_REGION
//  // Adding the subscription specific colony to the heartbeat data
//  if (!empty($subscription['heartbeat_data']['search_service_colony'])) {
//    $search_host = $subscription['heartbeat_data']['search_service_colony'];
//  }
//  // Check if we are on Acquia Cloud hosting. @see NN-2503
//  if (!empty($_ENV['AH_SITE_ENVIRONMENT']) && !empty($_ENV['AH_SERVER_REGION'])) {
//    if ($_ENV['AH_SERVER_REGION'] == 'us-east-1' && $search_host == 'search.acquia.com') {
//      $search_host = 'internal-search.acquia.com';
//    }
//    elseif (strpos($search_host, 'search-' . $_ENV['AH_SERVER_REGION']) === 0) {
//      $search_host = 'internal-' . $search_host;
//    }
//  }
//
//  $environment = array(
//    'url' => 'http://' . $search_host . ($config->get('search.path') ? $config->get('search.path') : '/solr/'. $identifier),
////    'service_class' => 'AcquiaSearchService',
//  );
//  return $environment;
//}
