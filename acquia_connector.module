<?php

use Drupal\Core\Database\Database;
use Drupal\acquia_connector\Subscription;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

// Version of SPI data format.
define('ACQUIA_SPI_DATA_VERSION', 2.1);

/**
 * Identifiers for the method of sending SPI data.
 */
define('ACQUIA_SPI_METHOD_CALLBACK', 'menu');
define('ACQUIA_SPI_METHOD_CRON', 'cron');
define('ACQUIA_SPI_METHOD_DRUSH', 'drush');
define('ACQUIA_SPI_METHOD_CREDS', 'creds');
define('ACQUIA_SPI_METHOD_INSIGHT', 'insight');

/**
 * Implements hook_help().
 */
function acquia_connector_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.acquia_connector':
      $output = '<h2>' . t('Acquia Connector') . '</h2>';
      $output .= '<p>' . t("The Acquia Network Connector module allows you to connect your site to the Acquia Network and use its variety of services.") . '<p>';
      $output .= '<p>' . \Drupal::l(t('Read more about the installation and use of the Acquia Network Connector module on the Acquia Library'), Url::fromUri('https://docs.acquia.com/network/install/connector', array())) . '</p>';
      $output .= '<dl>';
      $output .= '<dt>Acquia SPI Custom Tests</dt>';
      $output .= '<dd>' . t('Acquia Insight supports custom tests for your site. See <strong>acquia_spi.api.php</strong> for information on the custom test hook and validate your tests for inclusion in outgoing SPI data with the Drush command, <strong>spi-test-validate</strong>.') . '</dt>';
      $output .= '<dt>Acquia Search</dt>';
      $output .= '<dd>' . t('Provides authentication service to the Apache Solr Search Integration module to enable use of Acquia\'s hosted Solr search indexes.') . '</dt>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Configuration settings') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Data collection and examination') . '</dt>';
      $output .= '<dd>' . t('Upon cron (or if configured to run manually) information about your site will be sent and analyzed as part of the Acquia Insight service. You can optionally exclude information about admin privileges, content and user count, and watchdog logs.');
      $output .= '<dt>' . t('Source code analysis') . '</dt>';
      $output .= '<dd>' . t('If your site supports external SSL connections, Acquia Insight will examine the source code of your site to detect alterations and provide code diffs and update recommentations.');
      $output .= '<dt>' . t('Receive updates from Acquia Network') . '</dt>';
      $output .= '<dd>' . t('Receive dynamic updates on the Network Settings page from Acquia.com about your subscription and new features.') . '</dd>';
      $output .= '<dt>' . t('Allow Insight to update list of approved variables.') . '</dt>';
      $output .= '<dd>' . t('As part of the Acquia Insight service, some variables can be corrected to their recommended settings from within the Insight system. The list of variables that can be corrected can also be updated at your discretion.') . '</dd>';
      $output .= '</dl>';

      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter()..
 */
function acquia_connector_form_system_modules_alter(&$form, &$form_state) {
  if (isset($form['description']['acquia_search'])) {
    $subscription = \Drupal::config('acquia_connector.settings')->get('subscription_data');

    if (!\Drupal::moduleHandler()->moduleExists('acquia_search') && empty($subscription['active'])) {
      $form['status']['#disabled_modules'][] = 'acquia_search';
      $text = 'Acquia Search requires an <a href="@network-url">Acquia Network subscription</a>';
      $message = t($text, array('@network-url' => 'http://acquia.com/products-services/acquia-search'));
      $form['description']['acquia_search']['#value'] = '<div style="padding-left:5px; margin:8px 0px" class="messages warning" id="acquia-agent-no-search">' . $message . '</div>' . $form['description']['acquia_search']['#value'];
    }
  }
}

/**
 * Implements hook_cron().
 */
function acquia_connector_cron() {
  // Check subscription and send a heartbeat to Acquia Network via XML-RPC.
  acquia_agent_check_subscription();

  $config = \Drupal::config('acquia_connector.settings');

  // Get the last time we processed data.
  $last = \Drupal::state('acquia_connector.cron_last', 0);

  // 30 minute interval for sending site profile.
  $interval = $config->get('cron_interval');

  // Determine if the required interval has passed.
  if ($config->get('use_cron') && ((REQUEST_TIME - $last) > ($interval * 60))) {
    acquia_connector_send_full_spi(ACQUIA_SPI_METHOD_CRON);
  }
}

/**
 * Implements hook_toolbar().
 */
function acquia_connector_toolbar() {
  $link = array(
    '#type' => 'link',
    '#options' => array(
      'html' => TRUE
    ),
  );

  $subscription_class = new Subscription();

  if ($subscription_class->isActive()) {
    $subscription = \Drupal::config('acquia_connector.settings')->get('subscription_data');

    if (is_array($subscription['expiration_date']) && isset($subscription['active']) && $subscription['active'] !== FALSE) {
      // Yes, this uses inline CSS, which sounds bad, but including a CSS file
      // just for this sounds equally bad.
      $icon = '<img src="' . base_path() . 'core/misc/message-24-ok.png" alt="ok" style="vertical-align: middle;" />';
      $link['#title'] = t("!icon Subscription active (expires @date)", array('!icon' => $icon, '@date' => format_date(strtotime($subscription['expiration_date']['value']), 'custom', 'Y/n/j')));
      $link['#options']['attributes']['class'][] = "acquia-active-subscription";
      $link['#href'] = $subscription['href'];
    }
  }

  if (empty($link['#href'])) {
    // Yes, this uses inline CSS, which sounds bad, but including a CSS file
    // just for this sounds equally bad.
    $icon = '<img src="' . base_path() . 'core/misc/message-16-error.png" alt="error" style="vertical-align: middle;" />';
    $link['#title'] = t("!icon Subscription not active", array('!icon' => $icon));
    $link['#attributes']['class'][] = "acquia-inactive-subscription";
    $link['#href'] = 'http://acquia.com/network';
  }

  return array(
    'acquia_connector' => array(
      '#type' => 'toolbar_item',
      'tab' => $link,
      '#weight' => 200,
    ),
  );
}

/**
 * Implements hook_update_status_alter().
 *
 * This compares the array of computed information about projects that are
 * missing available updates with the saved settings. If the settings specify
 * that a particular project or release should be ignored, the status for that
 * project is altered to indicate it is ignored because of settings.
 *
 * @param $projects
 *   Reference to an array of information about available updates to each
 *   project installed on the system.
 *
 * @see update_calculate_project_data()
 */
function acquia_connector_update_status_alter(&$projects) {
  //if (!$subscription = acquia_agent_has_update_service()) {
    //Get subscription data or return if the service is not enabled.
    //return;
  //}

  foreach ($projects as $project => $project_info) {
    if ($project == 'drupal') {
      if (isset($subscription['update'])) {
        $projects[$project]['status'] = isset($subscription['update']['status']) ? $subscription['update']['status'] : t('Unknown');
        $projects[$project]['releases'] = isset($subscription['update']['releases']) ? $subscription['update']['releases'] : array();
        $projects[$project]['recommended'] = isset($subscription['update']['recommended']) ? $subscription['update']['recommended'] : '';
        $projects[$project]['latest_version'] = isset($subscription['update']['latest_version']) ? $subscription['update']['latest_version'] : '';
        // Security updates are a separate piece of data.  If we leave it, then core
        // security warnings from druapl.org will also be displayed on the update page.
        unset($projects[$project]['security updates']);
      }
      else {
        $projects[$project]['status'] = UPDATE_NOT_CHECKED;
        $projects[$project]['reason'] = t('No information available from the Acquia Network');
        unset($projects[$project]['releases']);
        unset($projects[$project]['recommended']);
      }
      $projects[$project]['link'] = 'http://acquia.com/products-services/acquia-drupal';
      $projects[$project]['title'] = 'Acquia Drupal';
      $projects[$project]['existing_version'] = ACQUIA_DRUPAL_VERSION;
      $projects[$project]['install_type'] = 'official';
      unset($projects[$project]['extra']);
    }
    elseif ($project_info['datestamp'] == 'acquia drupal') {
      $projects['drupal']['includes'][$project] = !empty($project_info['title']) ? $project_info['title'] : '';
      unset($projects[$project]);
    }
  }
}

/******** start code to rewrite *********/


/**
 * Implements hook_system_info_alter()
 */
function acquia_connector_system_info_alter(&$info) {
//  if (!$subscription = acquia_agent_has_update_service()) {
//    // Get subscription data or return if the service is not enabled.
//    return;
//  }
//
//  if (isset($info['acquia'])) {
//    // Slight hack - the datestamp field is carried through by update.module.
//    $info['datestamp'] = 'acquia drupal';
//  }
}

/******** end code to rewrite *********/

/**
 * Helper function to check if an identifer and key exist.
 */
function acquia_agent_has_credentials() {
  $config = \Drupal::config('acquia_agent.credentials');
  return (bool) ($config->get('identifier') && $config->get('key'));
}

/**
 * Get subscription status from the Acquia Network, and store the result.
 *
 * This check also sends a heartbeat to the Acquia Network unless
 * $params['no_heartbeat'] == 1.
 *
 * @return FALSE, integer (xmlrpc error number), or subscription data
 */
function acquia_agent_check_subscription($params = array()) {
  $config = \Drupal::config('acquia_connector.settings');
  $current_subscription = $config->get('subscription_data');
  $subscription = FALSE;
  $active = FALSE;
  if (!acquia_agent_has_credentials()) {
    // If there is not an identifier or key, delete any old subscription data.
    $config->clear('subscription_data');
  }
  else {
    // Get our subscription data
    $subscription = acquia_agent_get_subscription($params);
    if (is_numeric($subscription)) {
      switch ($subscription) {
        case SUBSCRIPTION_NOT_FOUND:
        case SUBSCRIPTION_EXPIRED:
          // Fall through since these values are stored and used by
          // acquia_search_acquia_subscription_status()
          break;
        default:
          // Likely server error (503) or connection timeout (-110) so leave
          // current subscription in place. _acquia_agent_request() logged an
          // error message.
          return $current_subscription;
      }
    }
    $config->set('subscription_data', $subscription);
    // Check if our main subscription is active
    if ($subscription) {
      $active = acquia_agent_subscription_is_active();
    }
  }
  \Drupal::moduleHandler()->invokeAll('acquia_subscription_status', [$active, $subscription]);
  return $subscription;
}
