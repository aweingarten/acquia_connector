<?php

/**
 * Implements hook_help().
 */
function acquia_connector_help($path, $arg) {
  switch ($path) {
    case 'admin/help#acquia_connector':
      $output = '<h2>' . t('Acquia Connector module') . '</h2>';
      $output .= '<p>' . t("The Acquia Network Connector suite of modules allow you to connect your site to the Acquia Network and use its variety of services.") . '<p>';
      $output .= '<p>' . t("<a href='!url'>Read more about the installation and use of the Acquia Network Connector module on the Acquia Library</a>.", array('!url' => url('https://docs.acquia.com/network/install/connector', array('external' => TRUE)))) . '</p>';
      $output .= '<dl>';
      $output .= '<dt>Acquia Agent</dt>';
      $output .= '<dd>' . t('Enables secure communication between your Drupal sites and the Acquia Network.') . '</dt>';
      $output .= '<dt>Acquia SPI</dt>';
      $output .= '<dd>' . t('Automates the collection of site information. Required for use with the Acquia Insight service.') . '</dt>';
      $output .= '<dt>Acquia SPI Custom Tests</dt>';
      $output .= '<dd>' . t('Acquia Insight supports custom tests for your site. See <strong>acquia_spi.api.php</strong> for information on the custom test hook and validate your tests for inclusion in outgoing SPI data with the Drush command, <strong>spi-test-validate</strong>.') . '</dt>';
      $output .= '<dt>Acquia Search</dt>';
      $output .= '<dd>' . t('Provides authentication service to the Apache Solr Search Integration module to enable use of Acquia\'s hosted Solr search indexes.') . '</dt>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Configuration settings') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Data collection and examination') . '</dt>';
      $output .= '<dd>' . t('Upon cron (or if configured to run manually) information about your site will be sent and analyzed as part of the Acquia Insight service. You can optionally exclude information about admin privileges, content and user count, and watchdog logs.');
      $output .= '<dt>' . t('Source code analysis') . '</dt>';
      $output .= '<dd>' . t('If your site supports external SSL connections, Acquia Insight will examine the source code of your site to detect alterations and provide code diffs and update recommentations.');
      $output .= '<dt>' . t('Receive updates from Acquia Network') . '</dt>';
      $output .= '<dd>' . t('Receive dynamic updates on the Network Settings page from Acquia.com about your subscription and new features.') . '</dd>';
      $output .= '<dt>' . t('Allow Insight to update list of approved variables.') . '</dt>';
      $output .= '<dd>' . t('As part of the Acquia Insight service, some variables can be corrected to their recommended settings from within the Insight system. The list of variables that can be corrected can also be updated at your discretion.') . '</dd>';
      $output .= '</dl>';

      return $output;
  }
}

/**
 * Implements hook_cron().
 */
function acquia_connector_cron() {
  // Check subscription and send a heartbeat to Acquia Network via XML-RPC.
  acquia_agent_check_subscription();

  $config = \Drupal::config('acquia_connector.settings');

  // Get the last time we processed data.
  $last = \Drupal::state('acquia_connector.cron_last', 0);

  // 30 minute interval for sending site profile.
  $interval = $config->get('cron_interval');

  // Determine if the required interval has passed.
  if ($config->get('use_cron') && ((REQUEST_TIME - $last) > ($interval * 60))) {
    $ret = acquia_connector_send_full_spi(ACQUIA_SPI_METHOD_CRON);
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function acquia_connector_toolbar_alter(&$items) {
  $link = array();
  if (acquia_connector_subscription_is_active()) {
    $subscription = \Drupal::config('acquia_connector.settings')->get('subscription_data');
    if (is_array($subscription['expiration_date']) && isset($subscription['active']) && $subscription['active'] !== FALSE) {
      // Yes, this uses inline CSS, which sounds bad, but including a CSS file
      // just for this sounds equally bad.
      $icon = '<img src="' . base_path() . 'core/misc/message-24-ok.png" alt="ok" style="vertical-align: middle;" />';
      $link['title'] = t("!icon Subscription active (expires @date)", array('!icon' => $icon, '@date' => format_date(strtotime($subscription['expiration_date']['value']), 'custom', 'Y/n/j')));
      $link['attributes']['class'][] = "acquia-active-subscription";
      $link['href'] = $subscription['href'];
    }
  }

  if (empty($link)) {
    // Yes, this uses inline CSS, which sounds bad, but including a CSS file
    // just for this sounds equally bad.
    $icon = '<img src="' . base_path() . 'core/misc/message-16-error.png" alt="error" style="vertical-align: middle;" />';
    $link['title'] = t("!icon Subscription not active", array('!icon' => $icon));
    $link['attributes']['class'][] = "acquia-inactive-subscription";
    $link['href'] = 'http://acquia.com/network';
  }

  $link['html'] = TRUE;
  $items['user']['tray']['user_links']['#links'] = array_merge(array('acquia_agent' => $link), $items['user']['tray']['user_links']['#links']);
}

/**
 * Implements hook_update_status_alter().
 *
 * This compares the array of computed information about projects that are
 * missing available updates with the saved settings. If the settings specify
 * that a particular project or release should be ignored, the status for that
 * project is altered to indicate it is ignored because of settings.
 *
 * @param $projects
 *   Reference to an array of information about available updates to each
 *   project installed on the system.
 *
 * @see update_calculate_project_data()
 */
function acquia_connector_update_status_alter(&$projects) {
  if (!$subscription = acquia_agent_has_update_service()) {
    // Get subscription data or return if the service is not enabled.
    return;
  }

  foreach ($projects as $project => $project_info) {
    if ($project == 'drupal') {
      if (isset($subscription['update'])) {
        $projects[$project]['status'] = isset($subscription['update']['status']) ? $subscription['update']['status'] : t('Unknown');
        $projects[$project]['releases'] = isset($subscription['update']['releases']) ? $subscription['update']['releases'] : array();
        $projects[$project]['recommended'] = isset($subscription['update']['recommended']) ? $subscription['update']['recommended'] : '';
        $projects[$project]['latest_version'] = isset($subscription['update']['latest_version']) ? $subscription['update']['latest_version'] : '';
        // Security updates are a separate piece of data.  If we leave it, then core
        // security warnings from druapl.org will also be displayed on the update page.
        unset($projects[$project]['security updates']);
      }
      else {
        $projects[$project]['status'] = UPDATE_NOT_CHECKED;
        $projects[$project]['reason'] = t('No information available from the Acquia Network');
        unset($projects[$project]['releases']);
        unset($projects[$project]['recommended']);
      }
      $projects[$project]['link'] = 'http://acquia.com/products-services/acquia-drupal';
      $projects[$project]['title'] = 'Acquia Drupal';
      $projects[$project]['existing_version'] = ACQUIA_DRUPAL_VERSION;
      $projects[$project]['install_type'] = 'official';
      unset($projects[$project]['extra']);
    }
    elseif ($project_info['datestamp'] == 'acquia drupal') {
      $projects['drupal']['includes'][$project] = !empty($project_info['title']) ? $project_info['title'] : '';
      unset($projects[$project]);
    }
  }
}

/**
 * Implements hook_system_info_alter()
 */
function acquia_connector_system_info_alter(&$info) {
//  if (!$subscription = acquia_agent_has_update_service()) {
//    // Get subscription data or return if the service is not enabled.
//    return;
//  }
//
//  if (isset($info['acquia'])) {
//    // Slight hack - the datestamp field is carried through by update.module.
//    $info['datestamp'] = 'acquia drupal';
//  }
}
/**
 * Gather full SPI data and send to Acquia Network.
 *
 * @param string $method Optional identifier for the method initiating request.
 *   Values could be 'cron' or 'menu callback' or 'drush'.
 * @return mixed FALSE if data not sent else NSPI result array
 */
function acquia_connector_send_full_spi($method = '') {
  $spi = acquia_spi_get();

  if (!empty($method)) {
    $spi['send_method'] = $method;
  }

  $result = acquia_spi_send_data($spi);

  if ($result === FALSE) {
    return FALSE;
  }

  acquia_spi_handle_server_response($result);

  \Drupal::state()->set('acquia_connector.cron_last', REQUEST_TIME);

  return $result;
}

/**
 * Helper function to check if an identifer and key exist.
 */
function acquia_connector_has_credentials() {
  $config = \Drupal::config('acquia_connector.settings');
  return $config->get('identifier') && $config->get('key');
}

/**
 * Helper function to check if the site has an active subscription.
 */
function acquia_connector_subscription_is_active() {
  $active = FALSE;
  // Subscription cannot be active if we have no credentials.
  if (acquia_connector_has_credentials()) {
    $subscription = \Drupal::config('acquia_connector.settings')->get('subscription_data');
    // Make sure we have data at least once per day.
    if (isset($subscription['timestamp']) && (time() - $subscription['timestamp'] > 60*60*24)) {
      $subscription = acquia_agent_get_subscription(array('no_heartbeat' => 1));
    }
    $active = !empty($subscription['active']);
  }
  return $active;
}
