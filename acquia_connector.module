<?php

use Drupal\Core\Database\Database;
use Drupal\acquia_connector\Subscription;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

// Version of SPI data format.
define('ACQUIA_SPI_DATA_VERSION', 2.1);

/**
 * Identifiers for the method of sending SPI data.
 */
define('ACQUIA_SPI_METHOD_CALLBACK', 'menu');
define('ACQUIA_SPI_METHOD_CRON', 'cron');
define('ACQUIA_SPI_METHOD_DRUSH', 'drush');
define('ACQUIA_SPI_METHOD_CREDS', 'creds');
define('ACQUIA_SPI_METHOD_INSIGHT', 'insight');

/**
 * Implements hook_help().
 */
function acquia_connector_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.acquia_connector':
      $output = '<h2>' . t('Acquia Connector') . '</h2>';
      $output .= '<p>' . t("The Acquia Network Connector module allows you to connect your site to the Acquia Network and use its variety of services.") . '<p>';
      $output .= '<p>' . \Drupal::l(t('Read more about the installation and use of the Acquia Network Connector module on the Acquia Library'), Url::fromUri('https://docs.acquia.com/network/install/connector', array())) . '</p>';
      $output .= '<dl>';
      $output .= '<dt>Acquia SPI Custom Tests</dt>';
      $output .= '<dd>' . t('Acquia Insight supports custom tests for your site. See <strong>acquia_spi.api.php</strong> for information on the custom test hook and validate your tests for inclusion in outgoing SPI data with the Drush command, <strong>spi-test-validate</strong>.') . '</dt>';
      $output .= '<dt>Acquia Search</dt>';
      $output .= '<dd>' . t('Provides authentication service to the Apache Solr Search Integration module to enable use of Acquia\'s hosted Solr search indexes.') . '</dt>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Configuration settings') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Data collection and examination') . '</dt>';
      $output .= '<dd>' . t('Upon cron (or if configured to run manually) information about your site will be sent and analyzed as part of the Acquia Insight service. You can optionally exclude information about admin privileges, content and user count, and watchdog logs.');
      $output .= '<dt>' . t('Source code analysis') . '</dt>';
      $output .= '<dd>' . t('If your site supports external SSL connections, Acquia Insight will examine the source code of your site to detect alterations and provide code diffs and update recommentations.');
      $output .= '<dt>' . t('Receive updates from Acquia Network') . '</dt>';
      $output .= '<dd>' . t('Receive dynamic updates on the Network Settings page from Acquia.com about your subscription and new features.') . '</dd>';
      $output .= '<dt>' . t('Allow Insight to update list of approved variables.') . '</dt>';
      $output .= '<dd>' . t('As part of the Acquia Insight service, some variables can be corrected to their recommended settings from within the Insight system. The list of variables that can be corrected can also be updated at your discretion.') . '</dd>';
      $output .= '</dl>';

      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter()..
 */
function acquia_connector_form_system_modules_alter(&$form, &$form_state) {
  if (isset($form['description']['acquia_search'])) {
    $subscription = \Drupal::config('acquia_connector.settings')->get('subscription_data');

    if (!\Drupal::moduleHandler()->moduleExists('acquia_search') && empty($subscription['active'])) {
      $form['status']['#disabled_modules'][] = 'acquia_search';
      $text = 'Acquia Search requires an <a href="@network-url">Acquia Network subscription</a>';
      $message = t($text, array('@network-url' => 'http://acquia.com/products-services/acquia-search'));
      $form['description']['acquia_search']['#value'] = '<div style="padding-left:5px; margin:8px 0px" class="messages warning" id="acquia-agent-no-search">' . $message . '</div>' . $form['description']['acquia_search']['#value'];
    }
  }
}

/**
 * Implements hook_cron().
 */
function acquia_connector_cron() {
  // Check subscription and send a heartbeat to Acquia Network via XML-RPC.
  acquia_agent_check_subscription();

  $config = \Drupal::config('acquia_connector.settings');

  // Get the last time we processed data.
  $last = \Drupal::state('acquia_connector.cron_last', 0);

  // 30 minute interval for sending site profile.
  $interval = $config->get('cron_interval');

  // Determine if the required interval has passed.
  if ($config->get('use_cron') && ((REQUEST_TIME - $last) > ($interval * 60))) {
    acquia_connector_send_full_spi(ACQUIA_SPI_METHOD_CRON);
  }
}

/**
 * Implements hook_toolbar().
 */
function acquia_connector_toolbar() {
  $link = array(
    '#type' => 'link',
    '#options' => array(
      'html' => TRUE
    ),
  );

  $subscription_class = new Subscription();

  if ($subscription_class->isActive()) {
    $subscription = \Drupal::config('acquia_connector.settings')->get('subscription_data');

    if (is_array($subscription['expiration_date']) && isset($subscription['active']) && $subscription['active'] !== FALSE) {
      // Yes, this uses inline CSS, which sounds bad, but including a CSS file
      // just for this sounds equally bad.
      $icon = '<img src="' . base_path() . 'core/misc/message-24-ok.png" alt="ok" style="vertical-align: middle;" />';
      $link['#title'] = t("!icon Subscription active (expires @date)", array('!icon' => $icon, '@date' => format_date(strtotime($subscription['expiration_date']['value']), 'custom', 'Y/n/j')));
      $link['#options']['attributes']['class'][] = "acquia-active-subscription";
      $link['#href'] = $subscription['href'];
    }
  }

  if (empty($link['#href'])) {
    // Yes, this uses inline CSS, which sounds bad, but including a CSS file
    // just for this sounds equally bad.
    $icon = '<img src="' . base_path() . 'core/misc/message-16-error.png" alt="error" style="vertical-align: middle;" />';
    $link['#title'] = t("!icon Subscription not active", array('!icon' => $icon));
    $link['#attributes']['class'][] = "acquia-inactive-subscription";
    $link['#href'] = 'http://acquia.com/network';
  }

  return array(
    'acquia_connector' => array(
      '#type' => 'toolbar_item',
      'tab' => $link,
      '#weight' => 200,
    ),
  );
}

/**
 * Implements hook_update_status_alter().
 *
 * This compares the array of computed information about projects that are
 * missing available updates with the saved settings. If the settings specify
 * that a particular project or release should be ignored, the status for that
 * project is altered to indicate it is ignored because of settings.
 *
 * @param $projects
 *   Reference to an array of information about available updates to each
 *   project installed on the system.
 *
 * @see update_calculate_project_data()
 */
function acquia_connector_update_status_alter(&$projects) {
  //if (!$subscription = acquia_agent_has_update_service()) {
    //Get subscription data or return if the service is not enabled.
    //return;
  //}

  foreach ($projects as $project => $project_info) {
    if ($project == 'drupal') {
      if (isset($subscription['update'])) {
        $projects[$project]['status'] = isset($subscription['update']['status']) ? $subscription['update']['status'] : t('Unknown');
        $projects[$project]['releases'] = isset($subscription['update']['releases']) ? $subscription['update']['releases'] : array();
        $projects[$project]['recommended'] = isset($subscription['update']['recommended']) ? $subscription['update']['recommended'] : '';
        $projects[$project]['latest_version'] = isset($subscription['update']['latest_version']) ? $subscription['update']['latest_version'] : '';
        // Security updates are a separate piece of data.  If we leave it, then core
        // security warnings from druapl.org will also be displayed on the update page.
        unset($projects[$project]['security updates']);
      }
      else {
        $projects[$project]['status'] = UPDATE_NOT_CHECKED;
        $projects[$project]['reason'] = t('No information available from the Acquia Network');
        unset($projects[$project]['releases']);
        unset($projects[$project]['recommended']);
      }
      $projects[$project]['link'] = 'http://acquia.com/products-services/acquia-drupal';
      $projects[$project]['title'] = 'Acquia Drupal';
      $projects[$project]['existing_version'] = ACQUIA_DRUPAL_VERSION;
      $projects[$project]['install_type'] = 'official';
      unset($projects[$project]['extra']);
    }
    elseif ($project_info['datestamp'] == 'acquia drupal') {
      $projects['drupal']['includes'][$project] = !empty($project_info['title']) ? $project_info['title'] : '';
      unset($projects[$project]);
    }
  }
}

/******** start code to rewrite *********/


/**
 * Implements hook_system_info_alter()
 */
function acquia_connector_system_info_alter(&$info) {
//  if (!$subscription = acquia_agent_has_update_service()) {
//    // Get subscription data or return if the service is not enabled.
//    return;
//  }
//
//  if (isset($info['acquia'])) {
//    // Slight hack - the datestamp field is carried through by update.module.
//    $info['datestamp'] = 'acquia drupal';
//  }
}
///**
// * Gather full SPI data and send to Acquia Network.
// *
// * @param string $method Optional identifier for the method initiating request.
// *   Values could be 'cron' or 'menu callback' or 'drush'.
// * @return mixed FALSE if data not sent else NSPI result array
// */
//function acquia_connector_send_full_spi($method = '') {
//  $spi = acquia_connector_spi_get();
//
//  if (!empty($method)) {
//    $spi['send_method'] = $method;
//  }
//
//  $result = acquia_spi_send_data($spi);
//
//  if ($result === FALSE) {
//    return FALSE;
//  }
//
//  acquia_spi_handle_server_response($result);
//
//  \Drupal::state()->set('acquia_connector.cron_last', REQUEST_TIME);
//
//  return $result;
//}

/**
 * Get all system variables
 *
 * @return array()
 */
function acquia_connector_spi_get_variables_data() {
  global $conf;
  $data = array();
  return $data;
  $variables = array('acquia_spi_send_node_user', 'acquia_spi_admin_priv', 'acquia_spi_module_diff_data', 'acquia_spi_send_watchdog', 'acquia_spi_use_cron', 'cache_backends', 'cache_default_class', 'cache_inc', 'cron_safe_threshold', 'googleanalytics_cache', 'error_level', 'preprocess_js', 'page_cache_maximum_age', 'block_cache', 'preprocess_css', 'page_compression', 'cache', 'cache_lifetime', 'cron_last', 'clean_url', 'redirect_global_clean', 'theme_zen_settings', 'site_offline', 'site_name', 'user_register', 'user_signatures', 'user_admin_role', 'user_email_verification', 'user_cancel_method', 'filter_fallback_format', 'dblog_row_limit', 'date_default_timezone', 'file_default_scheme', 'install_profile', 'maintenance_mode', 'update_last_check', 'site_default_country', 'acquia_spi_saved_variables', 'acquia_spi_set_variables_automatic', 'acquia_spi_ignored_set_variables', 'acquia_spi_set_variables_override');
  $spi_def_vars = variable_get('acquia_spi_def_vars', array());
  $waived_spi_def_vars = variable_get('acquia_spi_def_waived_vars', array());
  // Merge hard coded $variables with vars from SPI definition.
  foreach($spi_def_vars as $var_name => $var) {
    if (!in_array($var_name, $waived_spi_def_vars) && !in_array($var_name, $variables)) {
      $variables[] = $var_name;
    }
  }
  // Add comment settings for node types.
  $types = node_type_get_types();
  if (!empty($types)) {
    foreach ($types as $name => $type) {
      $variables[] = 'comment_' . $name;
    }
  }
  foreach ($variables as $name) {
    if (isset($conf[$name])) {
      $data[$name] = $conf[$name];
    }
  }
  // Exception handling.
  if (module_exists('globalredirect') && function_exists('_globalredirect_get_settings')) {
    // Explicitly get Global Redirect settings since it deletes its variable
    // if the settings match the defaults.
    $data['globalredirect_settings'] = _globalredirect_get_settings();
  }
  // Drush overrides cron_safe_threshold so extract DB value if sending via drush.
  if (drupal_is_cli()) {
    $cron_safe_threshold = acquia_spi_get_db_variable('cron_safe_threshold');
    $data['cron_safe_threshold'] = !is_null($cron_safe_threshold) ? $cron_safe_threshold : DRUPAL_CRON_DEFAULT_THRESHOLD;
  }
  // Unset waived vars so they won't be sent to NSPI.
  foreach($data as $var_name => $var) {
    if (in_array($var_name, $waived_spi_def_vars)) {
      unset($data[$var_name]);
    }
  }
  // Collapse to JSON string to simplify transport.
  return drupal_json_encode($data);
}

/**
 * Check the presence of UID 0 in the users table.
 *
 * @return bool Whether UID 0 is present.
 *
 */
function acquia_connector_spi_uid_0_present() {
  return TRUE;
  $count = db_query("SELECT uid FROM {users} WHERE uid = 0")->rowCount();
  return $count == 1 ? TRUE : FALSE;
}

/**
 * Gather information about nodes, users and comments.
 *
 * @return
 *   An associative array.
 */
function acquia_connector_spi_get_quantum() {
  $quantum = array();
  // Get only published nodes.
  $quantum['nodes'] = db_select('node', 'n')->fields('n', array('nid'))->countQuery()->execute()->fetchField();
//  $quantum['nodes'] = db_select('node', 'n')->fields('n', array('nid'))->condition('n.status', NODE_PUBLISHED)->countQuery()->execute()->fetchField();
  // Get only active users.
//  $quantum['users'] = db_select('users', 'u')->fields('u', array('uid'))->condition('u.status', 1)->countQuery()->execute()->fetchField();
  $quantum['users'] = db_select('users', 'u')->fields('u', array('uid'))->countQuery()->execute()->fetchField();
//  if (module_exists('comment')) {
//    // Get only active comments.
//    $quantum['comments'] = db_select('comment', 'c')->fields('c', array('cid'))->condition('c.status', COMMENT_PUBLISHED)->countQuery()->execute()->fetchField();
//  }

  return $quantum;
}

/**
 * Recursive helper function for acquia_spi_file_hashes().
 */
function _acquia_connector_spi_generate_hashes($dir, $exclude_dirs = array(), $limit_dirs = array(), $module_break = FALSE, $orig_dir=NULL) {
  $hashes = array();
  $fileinfo = array();

  // Ensure that we have not nested into another module's dir
  if ($dir != $orig_dir && $module_break) {
    if (is_dir($dir) && $handle = opendir($dir)) {
      while ($file = readdir($handle)) {
        if (stristr($file, '.module')) {
          return;
        }
      }
    }
  }
  if (isset($handle)) {
    closedir($handle);
  }

  // Standard nesting function
  if (is_dir($dir) && $handle = opendir($dir)) {
    while ($file = readdir($handle)) {
      if (!in_array($file, array('.', '..', 'CVS', '.svn'))) {
        $path = $dir == '.' ? $file : "{$dir}/{$file}";
        if (is_dir($path) && !in_array($path, $exclude_dirs) && (empty($limit_dirs) || in_array($path, $limit_dirs)) && ($file != 'translations')) {
          list($sub_hashes, $sub_fileinfo) =  _acquia_connector_spi_generate_hashes($path, $exclude_dirs);
          $hashes = array_merge($sub_hashes, $hashes);
          $fileinfo = array_merge($sub_fileinfo, $fileinfo);
          $hashes[$path] = acquia_connector_spi_hash_path($path);
        }
        elseif (acquia_connector_spi_is_manifest_type($file)) {
          $hashes[$path] = acquia_connector_spi_hash_path($path);
          $owner = fileowner($path);
          if (function_exists('posix_getpwuid')) {
            $userinfo = posix_getpwuid($owner);
            $owner = $userinfo['name'];
          }
          $fileinfo[$path] = 'mt:' . filemtime($path) . '$p:' . substr(sprintf('%o', fileperms($path)), -4) . '$o:' . $owner . '$s:' . filesize($path);
        }
      }
    }
    closedir($handle);
  }

  return array($hashes, $fileinfo);
}

/**
 * Determine if a path is a file type we care about for modificaitons.
 */
function acquia_connector_spi_is_manifest_type($path) {
  $extensions = array(
    'php' => 1,
    'php4' => 1,
    'php5' => 1,
    'module' => 1,
    'inc' => 1,
    'install' => 1,
    'test' => 1,
    'theme' => 1,
    'engine' => 1,
    'profile' => 1,
    'css' => 1,
    'js' => 1,
    'info' => 1,
    'sh' => 1,
    // SSL certificates
    'pem' => 1,
    'pl' => 1,
    'pm' => 1,
  );
  $pathinfo = pathinfo($path);
  return isset($pathinfo['extension']) && isset($extensions[$pathinfo['extension']]);
}

/**
 * Calculate the sha1 hash for a path.
 *
 * @param $path
 *   The name of the file or a directory.
 * @return
 *   bas64 encoded sha1 hash. 'hash' is an empty string for directories.
 */
function acquia_connector_spi_hash_path($path = '') {
  $hash = '';
  if (file_exists($path)) {
    if (!is_dir($path)) {
      $string = file_get_contents($path);
      // Remove trailing whitespace
      $string = rtrim($string);
      // Replace all line endings and CVS/svn Id tags
      $string = preg_replace('/\$Id[^;<>{}\(\)\$]*\$/', 'x$' . 'Id$', $string);
      $string = preg_replace('/\r\n|\n|\r/', ' ', $string);
      $hash =  base64_encode(pack("H*", sha1($string)));
    }
  }
  return $hash;
}

/**
 * Gather information about modules on the site.
 *
 * @return array
 *   An associative array keyed by filename of associative arrays with
 *   information on the modules.
 */
function acquia_connector_spi_get_modules() {
  // Only do a full rebuild of the module cache every 1 at the most
//  $last_build = variable_get('acquia_spi_module_rebuild', 0);
//  if ($last_build < REQUEST_TIME - 86400) {
//    $modules = system_rebuild_module_data();
//    variable_set('acquia_spi_module_rebuild', REQUEST_TIME);
//  }
//  else {
//    $result = db_query("SELECT filename, name, type, status, schema_version, info FROM {system} WHERE type = 'module'");
//    foreach ($result as $file) {
//      $file->info = unserialize($file->info);
//      $modules[$file->filename] = $file;
//    }
//  }

  $modules = system_rebuild_module_data();
  uasort($modules, 'system_sort_modules_by_info_name');

  $result = array();
  $keys_to_send = array('name', 'version', 'package', 'core');
  foreach ($modules as $module_key => $module) {
    $info = array();
    $info['status'] = $module->status;
    foreach ($keys_to_send as $key) {
      $info[$key] = isset($module->info[$key]) ? $module->info[$key] : '';
    }
    $info['project'] = $module_key;
    $info['filename'] = $module->subpath;

//    // Determine which files belong to this module and hash them
//    $module_path = explode('/', $file->filename);
//    array_pop($module_path);
//
//    // We really only care about this module if it is in 'sites' folder.
//    // Otherwise it is covered by the hash of the distro's modules
//    if ($module_path[0]=='sites') {
//      $contrib_path = implode('/', $module_path);
//
//      // Get a hash for this module's files. If we nest into another module, we'll return
//      // and that other module will be covered by it's entry in the system table.
//      //
//      // !! At present we aren't going to do a per module hash, but rather a per-project hash. The reason being that it is
//      // too hard to tell an individual module appart from a project
//      //$info['module_data'] = _acquia_nspi_generate_hashes($contrib_path,array(),array(),TRUE,$contrib_path);
//      list($info['module_data']['hashes'], $info['module_data']['fileinfo']) = _acquia_spi_generate_hashes($contrib_path);
//    }
//    else {
      $info['module_data']['hashes'] = array();
      $info['module_data']['fileinfo'] = array();
//    }

    $result[] = $info;
  }
  return $result;
}

/**
 * Act on specific elements of SPI update server response.
 *
 * @param array $spi_response Array response from acquia_spi_send_data().
 */
function acquia_connector_spi_handle_server_response($spi_response) {
  // Check result for command to update SPI definition.
//  $update = isset($spi_response['update_spi_definition']) ? $spi_response['update_spi_definition'] : FALSE;
//  if ($update === TRUE) {
//    acquia_spi_update_definition();
//  }
  // Check for set_variables command.
//  $set_variables = isset($spi_response['set_variables']) ? $spi_response['set_variables'] : FALSE;
//  if ($set_variables !== FALSE) {
//    acquia_spi_set_variables($set_variables);
//  }
  // Log messages.
  $messages = isset($spi_response['nspi_messages']) ? $spi_response['nspi_messages'] : FALSE;
  if ($messages !== FALSE) {
//    watchdog('acquia spi', 'SPI update server response messages: @messages', array('@messages' => implode(', ', $messages)));
  }
}

/******** end code to rewrite *********/

/**
 * Helper function to check if an identifer and key exist.
 */
function acquia_agent_has_credentials() {
  $config = \Drupal::config('acquia_agent.credentials');
  return (bool) ($config->get('identifier') && $config->get('key'));
}

/**
 * Get subscription status from the Acquia Network, and store the result.
 *
 * This check also sends a heartbeat to the Acquia Network unless
 * $params['no_heartbeat'] == 1.
 *
 * @return FALSE, integer (xmlrpc error number), or subscription data
 */
function acquia_agent_check_subscription($params = array()) {
  $config = \Drupal::config('acquia_connector.settings');
  $current_subscription = $config->get('subscription_data');
  $subscription = FALSE;
  $active = FALSE;
  if (!acquia_agent_has_credentials()) {
    // If there is not an identifier or key, delete any old subscription data.
    $config->clear('subscription_data');
  }
  else {
    // Get our subscription data
    $subscription = acquia_agent_get_subscription($params);
    if (is_numeric($subscription)) {
      switch ($subscription) {
        case SUBSCRIPTION_NOT_FOUND:
        case SUBSCRIPTION_EXPIRED:
          // Fall through since these values are stored and used by
          // acquia_search_acquia_subscription_status()
          break;
        default:
          // Likely server error (503) or connection timeout (-110) so leave
          // current subscription in place. _acquia_agent_request() logged an
          // error message.
          return $current_subscription;
      }
    }
    $config->set('subscription_data', $subscription);
    // Check if our main subscription is active
    if ($subscription) {
      $active = acquia_agent_subscription_is_active();
    }
  }
  \Drupal::moduleHandler()->invokeAll('acquia_subscription_status', [$active, $subscription]);
  return $subscription;
}
