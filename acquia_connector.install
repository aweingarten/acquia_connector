<?php


/**
* @file
  * Install, update, and uninstall functions for the Update Manager module.
 */

use Drupal\Core\Url;
use Drupal\acquia_connector\Controller\SpiController;
use Drupal\acquia_connector\Controller\TestStatusController;
use Drupal\acquia_connector\Subscription;

/**
 * Implements hook_requirements().
 *
 * @return array
 *   An array describing the status of the site regarding available updates. If
 *   there is no update data, only one record will be returned, indicating that
 *   the status of core can't be determined. If data is available, there will be
 *   two records: one for core, and another for all of contrib (assuming there
 *   are any contributed modules or themes enabled on the site). In addition to
 *   the fields expected by hook_requirements ('value', 'severity', and
 *   optionally 'description'), this array will contain a 'reason' attribute,
 *   which is an integer constant to indicate why the given status is being
 *   returned (UPDATE_NOT_SECURE, UPDATE_NOT_CURRENT, or UPDATE_UNKNOWN). This
 *   is used for generating the appropriate email notification messages during
 *   update_cron(), and might be useful for other modules that invoke
 *   update_requirements() to find out if the site is up to date or not.
 *
 * @see _update_message_text()
 * @see _update_cron_notify()
 */
function acquia_connector_requirements($phase) {
  $requirements = array();
  $credentials = new Subscription();
  $has_credentials = $credentials->hasCredentials();
  $is_active = $credentials->isActive();

  switch ($phase) {
    case 'runtime':
      // Inform users on subscription status. Either we know they are active,
      // or we know they have credentials but not active (not set up yet) or
      // we have credentials but an inactive subscription (either bad
      // credentials or expired subscription).

      if ($is_active) {
        $requirements['acquia_subscription_status'] = array(
          'title' => t('Acquia Network subscription status'),
          'severity' => REQUIREMENT_OK,
          'value' => t('Active'),
          'description' => t('You can <a href="@refresh-status">manually refresh the subscription status</a>.', array('@refresh-status' => Url::fromUri('base://admin/config/system/acquia-connector/refresh-status', array())->toString())),
        );
      }
      elseif (!$has_credentials) {
        $requirements['acquia_subscription_status'] = array(
          'title' => t('Acquia Network subscription status'),
          'severity' => REQUIREMENT_WARNING,
          'value' => t('Unknown'),
          'description' => t('You did not complete your signup to the Acquia Network. You can provide the subscription identifier and the subscription key at the <a href="@settings">Acquia settings</a> page or try to <a href="@refresh-status">manually refresh the subscription status</a>.', array('@settings' => Url::fromUri('base://admin/config/system/acquia-connector', array())->toString(), '@refresh-status' => Url::fromUri('base://admin/config/system/acquia-connector/refresh-status', array())->toString()))
        );
      }
      else {
        $subscription = \Drupal::config('acquia_connector.settings')->get('subscription_data');
        $href = isset($subscription['href']) ? $subscription['href'] . '/health' : 'http://acquia.com/network';
        $requirements['acquia_subscription_status'] = array(
          'title' => t('Acquia Network subscription status'),
          'severity' => REQUIREMENT_WARNING,
          'value' => t('Inactive'),
          'description' => t('Your subscription is expired or you are using an invalid identifier and key pair. You can check the subscription identifier and the subscription key at the <a href="@settings">Acquia settings</a> page. Check <a href="@acquia-network">your subscription on the Acquia Network</a> for further status information.', array('@settings' => Url::fromUri('base://admin/config/system/acquia-connector', array())->toString(), '@acquia-network' => $href)),
        );
      }

      // Acquia SPI custom tests status.
      $variables = array(
        '@help'     => Url::fromUri('base://admin/help/acquia_connector', array('absolute' => TRUE))->toString(),
        '@validate' => Url::fromUri('base://system/acquia-spi-custom-test-validate', array('absolute' => TRUE))->toString(),
      );

      $modules = \Drupal::moduleHandler()->getImplementations('acquia_spi_test');
      if (empty($modules)) {
        $description = 'No custom tests were detected in any module.<br/>';
        $value       = 'Not implemented (<a href="@help">more information</a>)';
        $severity    = REQUIREMENT_OK;
      }
      else {
        $status = new TestStatusController();
        $result = $status->testStatus();
        if (!empty($result)) {
          $modules = implode(', ', array_keys($result));
          $description = 'Custom tests within the following module(s) have failed validation and will not be sent: %modules. <br/>Please check the error logs for more information regarding how to pass validation or <a href="@validate">perform another validation check</a>. (A validation check can also be performed via the Drush command, "spi-test-validate.")';
          $value       = 'Failed (<a href="@help">more information</a>)';
          $severity    = REQUIREMENT_ERROR;
        }
        else {
          $modules     = implode(', ', $modules);
          $description = 'Custom test data is structured properly and is sending from: %modules';
          $value       = 'Passed';
          $severity    = REQUIREMENT_OK;
        }

        $variables['%modules'] = $modules;
      }
      $requirements['acquia_spi_test'] = array(
        'title'       => t('Acquia Network SPI Custom Tests'),
        'description' => t($description, $variables),
        'value'       => t($value, $variables),
        'severity'    => $severity,
      );
    break;
  }

  return $requirements;
}

/**
 * Implements hook_init().
 */
function acquia_connector_install() {
  $config = \Drupal::config('acquia_connector.settings');
  // Auto-connect with Acquia Cloud credentials if there's not currently a
  // connection or credentials set.
  if (!acquia_agent_has_credentials() && !$config->get('subscription_data')
    && $config->get('ah.network_key') && $config->get('ah.network_identifier')) {

    // @todo Use settings for AH stuff instead?
    $config->set('identifier', $config->get('ah.network_identifier'))
      ->set('key', $config->get('ah.network_key'))
      ->save();

    $activated = acquia_agent_check_subscription();

    if ($activated) {
      $text = t('Your site has been automatically connected to the Acquia Network. <a href="!url">Change subscription</a>', array('!url' => url('admin/config/system/acquia-agent/setup')));
      drupal_set_message($text, 'status', FALSE);
    }
  }

  $request = ltrim(request_uri(), DIRECTORY_SEPARATOR);
  $hide_signup_messages = $config->get('hide_signup_messages');
  $current_user = \Drupal::currentUser();

  // @todo
  // Display a message asking to connect to the Acquia Network if ALL of the
  // following conditions are met:
  //
  // 1) $hide_signup_messages is FALSE (i.e., the default setting)
  // 2) We're not on an AJAX overlay page (we should route-match this)
  // 3) We're not actually configuring Acquia Agent (again, route-match this)
  // 4) There's no POST data
  // 5) The current user has 'administer site configuration' permission
  // 6) There are no credentials already set up for Acquia Agent
  // 7) We're not serving a public file
  //
  // This is partially refactored into src/EventSubscriber/InitSubscriber.
  //
  /* if (!$hide_signup_messages &&
    (arg(0) != 'overlay-ajax') && (arg(3) != 'acquia-agent') &&
    empty($_POST) &&  $current_user->hasPermission('administer site configuration') &&
    (!acquia_agent_has_credentials()) &&
    (strpos($request, variable_get('file_public_path', conf_path() . DIRECTORY_SEPARATOR . 'files')) !== 0)) {
    $text = 'Sign up for Acquia Cloud Free, a free Drupal sandbox to experiment with new features, test your code quality, and apply continuous integration best practices. Check out the <a href="!acquia-free">epic set of dev features and tools</a> that come with your free subscription.<br/>If you have an Acquia Network subscription, <a href="!settings">connect now</a>. Otherwise, you can turn this message off by disabling the Acquia Network modules.';
    if (\Drupal::request()->server->has('AH_SITE_GROUP')) {
      $text = '<a href="!settings">Connect your site to the Acquia Network now</a>. <a href="!more">Learn more</a>.';
    }
    $message = t($text, array('!acquia-free' => url('https://www.acquia.com/acquia-cloud-free'), '!settings' => url('admin/config/system/acquia-agent/setup')));
    drupal_set_message($message, 'warning', FALSE);
  }
  */
}
